/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 21 14:34:58 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.net.Proxy;
import java.util.HashMap;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 531L, 531L);
      boolean boolean0 = cSVRecord0.isSet(778);
      assertEquals(531L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
      assertEquals(531L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "%4Mt", (-1198L), (-1198L));
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals((-1198L), cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertEquals((-1198L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("NullString=<", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("c%xTY-*X+\"X/?m?C", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "', recordNumber=");
      cSVRecord0.putIn(hashMap0);
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "(IC%8,#@N0U-G@3aL", 0L, 4265L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(4265L, cSVRecord0.getCharacterPosition());
      assertEquals(0L, long0);
      assertEquals(2, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("?)e}hHV:|:ijvA$", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 1L, 2107L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(1L, long0);
      assertEquals(4, cSVRecord0.size());
      assertEquals(2107L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-1617L), 0L);
      cSVRecord0.getParser();
      assertEquals((-1617L), cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(2, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 1, 1);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "mZ", 1991L, 1);
      cSVRecord0.getParser();
      assertEquals(1L, cSVRecord0.getCharacterPosition());
      assertEquals(6, cSVRecord0.size());
      assertEquals(1991L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("c%xTY-*X+\"X/?m?C", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "H8C", 0L, 0L);
      cSVRecord0.getComment();
      assertEquals(4, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("NullString=<", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, long0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-1L), (-1L));
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-1L), (-1L));
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertEquals((-1L), long0);
      assertEquals(2, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("c%xTY-*X+\"X/?m?C", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped("c%xTY-*X+\"X/?m?C");
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "<bv[+g]", (-1L), (-1617L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("ZxA0XwUXv");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(" reading next record: ", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet(0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "<bv[+g]", (-1L), (-1617L));
      boolean boolean0 = cSVRecord0.isSet(2);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals((-1617L), cSVRecord0.getCharacterPosition());
      assertEquals(2, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("?)e}hHV:|:ijvA$", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 1L, 2107L);
      boolean boolean0 = cSVRecord0.isSet((-1687));
      assertFalse(boolean0);
      assertEquals(2107L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(4, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "J)UR]43*$CT9?Q", (-395L), 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
      assertEquals(1, cSVRecord0.size());
      assertEquals((-395L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "J)UR]43*$CT9?Q", (-395L), 0L);
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals((-395L), cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertTrue(boolean0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("]zOnLb@(|3", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "<bv[+g]", (-1L), (-1617L));
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(2, cSVRecord0.size());
      assertEquals((-1617L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p;");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVRecord0.get("p;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for p; not found, expected one of [DIRECT, HTTP, SOCKS]
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, ", values=", 0L, 0L);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "<bv[+g]", (-1L), (-1617L));
      int int0 = cSVRecord0.size();
      assertEquals((-1617L), cSVRecord0.getCharacterPosition());
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "<bv[+g]", (-1L), (-1617L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1L), long0);
      assertEquals(2, cSVRecord0.size());
      assertEquals((-1617L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("NullString=<", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getParser();
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uZcBQY?.Ia$$qCw6~sM");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-4649L), (-4649L));
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-4649L), 2221L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(2478);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2478
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "@n[Fy*O&$9W~>v(", 0L, 538L);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(6, stringArray1.length);
      assertEquals(0L, cSVRecord0.getRecordNumber());
      assertEquals(538L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-4649L), (-4649L));
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-4649L), 2221L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) quoteMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "J)UR]43*$CT9?Q", (-395L), 0L);
      String string0 = cSVRecord0.toString();
      assertEquals("CSVRecord [comment='J)UR]43*$CT9?Q', recordNumber=-395, values=[null]]", string0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uZcBQY?.Ia$$qCw6~sM");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-4649L), (-4649L));
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-4649L), 2221L);
      cSVRecord0.toMap();
      assertEquals((-4649L), cSVRecord0.getRecordNumber());
      assertEquals(2221L, cSVRecord0.getCharacterPosition());
      assertEquals(7, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uZcBQY?.Ia$$qCw6~sM");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-4649L), (-4649L));
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-4649L), 2221L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(2221L, long0);
      assertEquals((-4649L), cSVRecord0.getRecordNumber());
      assertEquals(7, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uZcBQY?.Ia$$qCw6~sM");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-4649L), (-4649L));
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-4649L), 2221L);
      cSVRecord0.getComment();
      assertEquals((-4649L), cSVRecord0.getRecordNumber());
      assertEquals(7, cSVRecord0.size());
      assertEquals(2221L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("?)e}hHV:|:ijvA$", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 1L, 2107L);
      cSVRecord0.iterator();
      assertEquals(4, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(2107L, cSVRecord0.getCharacterPosition());
  }
}
