/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 24 19:49:24 GMT 2020
 */

package net.sf.jniinchi;

import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_STATUS;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class INCHI_STATUS_ESTest extends INCHI_STATUS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      INCHI_STATUS[] iNCHI_STATUSArray0 = INCHI_STATUS.values();
      assertEquals(6, iNCHI_STATUSArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.valueOf("VALID_STANDARD");
      assertEquals(INCHI_STATUS.VALID_STANDARD, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.valueOf("INVALID_VERSION");
      assertEquals(2, iNCHI_STATUS0.getIndx());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.valueOf("VALID_NON_STANDARD");
      assertEquals(INCHI_STATUS.VALID_NON_STANDARD, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.VALID_STANDARD;
      int int0 = iNCHI_STATUS0.getIndx();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.VALID_NON_STANDARD;
      int int0 = iNCHI_STATUS0.getIndx();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      INCHI_STATUS.getValue((-1268));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.getValue(3);
      assertEquals(INCHI_STATUS.INVALID_LAYOUT, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.getValue(2);
      assertEquals(INCHI_STATUS.INVALID_VERSION, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.getValue(1);
      assertEquals(INCHI_STATUS.INVALID_PREFIX, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.getValue(0);
      assertEquals(INCHI_STATUS.VALID_STANDARD, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.getValue(4);
      assertEquals(INCHI_STATUS.FAIL_I2I, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.getValue((-1));
      assertEquals(INCHI_STATUS.VALID_NON_STANDARD, iNCHI_STATUS0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      INCHI_STATUS iNCHI_STATUS0 = INCHI_STATUS.FAIL_I2I;
      int int0 = iNCHI_STATUS0.getIndx();
      assertEquals(4, int0);
  }
}
