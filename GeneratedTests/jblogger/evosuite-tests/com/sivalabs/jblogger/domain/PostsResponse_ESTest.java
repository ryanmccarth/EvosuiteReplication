/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 26 22:40:38 GMT 2020
 */

package com.sivalabs.jblogger.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sivalabs.jblogger.domain.PostsResponse;
import com.sivalabs.jblogger.entities.Post;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PostsResponse_ESTest extends PostsResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPosts((-359));
      postsResponse0.hashCode();
      assertEquals((-359), postsResponse0.getTotalPosts());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPages(248);
      postsResponse0.hashCode();
      assertEquals(248, postsResponse0.getTotalPages());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setCurrentPageNo((-4756));
      postsResponse0.hashCode();
      assertEquals((-4756), postsResponse0.getCurrentPageNo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPosts((-359));
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse1.equals(postsResponse0);
      assertEquals((-359), postsResponse0.getTotalPosts());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPages(2859);
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertEquals(2859, postsResponse0.getTotalPages());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setCurrentPageNo((-1049));
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertEquals((-1049), postsResponse0.getCurrentPageNo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setHasPreviousPage(true);
      boolean boolean0 = postsResponse0.isHasPreviousPage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setHasNextPage(true);
      boolean boolean0 = postsResponse0.isHasNextPage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPosts(59);
      int int0 = postsResponse0.getTotalPosts();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPosts((-359));
      int int0 = postsResponse0.getTotalPosts();
      assertEquals((-359), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPages(2859);
      int int0 = postsResponse0.getTotalPages();
      assertEquals(2859, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPages((-4756));
      int int0 = postsResponse0.getTotalPages();
      assertEquals((-4756), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      postsResponse0.setPosts(linkedList0);
      List<Post> list0 = postsResponse0.getPosts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      Post post0 = new Post();
      linkedList0.add(post0);
      postsResponse0.setPosts(linkedList0);
      List<Post> list0 = postsResponse0.getPosts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setCurrentPageNo(79);
      int int0 = postsResponse0.getCurrentPageNo();
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setCurrentPageNo((-1062));
      int int0 = postsResponse0.getCurrentPageNo();
      assertEquals((-1062), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      boolean boolean0 = postsResponse0.canEqual(postsResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      boolean boolean0 = postsResponse0.canEqual("kqp^N(eeo(.\"?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      int int0 = postsResponse0.getTotalPages();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      int int0 = postsResponse0.getTotalPosts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      boolean boolean0 = postsResponse0.isHasNextPage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      int int0 = postsResponse0.getCurrentPageNo();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      List<Post> list0 = postsResponse0.getPosts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      boolean boolean0 = postsResponse0.isHasPreviousPage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setHasPreviousPage(true);
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertTrue(postsResponse0.isHasPreviousPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setHasNextPage(true);
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertTrue(postsResponse0.isHasNextPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPosts((-359));
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertEquals((-359), postsResponse0.getTotalPosts());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      PostsResponse postsResponse1 = new PostsResponse();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      postsResponse0.setPosts(linkedList0);
      assertFalse(postsResponse0.equals((Object)postsResponse1));
      
      postsResponse1.setPosts(linkedList0);
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertTrue(postsResponse1.equals((Object)postsResponse0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      PostsResponse postsResponse1 = new PostsResponse();
      assertTrue(postsResponse1.equals((Object)postsResponse0));
      
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      postsResponse1.setPosts(linkedList0);
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertFalse(postsResponse1.equals((Object)postsResponse0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      PostsResponse postsResponse1 = new PostsResponse();
      assertTrue(postsResponse1.equals((Object)postsResponse0));
      
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      postsResponse0.setPosts(linkedList0);
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertFalse(postsResponse1.equals((Object)postsResponse0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals("PostsResponse(posts=null, currentPageNo=0, totalPages=0, totalPosts=0, hasNextPage=false, hasPreviousPage=false)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setHasPreviousPage(true);
      postsResponse0.hashCode();
      assertTrue(postsResponse0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      String string0 = postsResponse0.toString();
      assertEquals("PostsResponse(posts=null, currentPageNo=0, totalPages=0, totalPosts=0, hasNextPage=false, hasPreviousPage=false)", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setTotalPages((-1));
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertEquals((-1), postsResponse0.getTotalPages());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setHasNextPage(true);
      postsResponse0.hashCode();
      assertTrue(postsResponse0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      postsResponse0.setPosts(linkedList0);
      postsResponse0.hashCode();
      assertEquals(0, postsResponse0.getTotalPosts());
      assertEquals(0, postsResponse0.getTotalPages());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PostsResponse postsResponse0 = new PostsResponse();
      postsResponse0.setCurrentPageNo(59);
      PostsResponse postsResponse1 = new PostsResponse();
      boolean boolean0 = postsResponse0.equals(postsResponse1);
      assertEquals(59, postsResponse0.getCurrentPageNo());
      assertFalse(boolean0);
  }
}
