/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 21 14:27:15 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      Object[] objectArray0 = new Object[7];
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.MONGODB_TSV.withHeader(class0);
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.getQuoteMode();
      cSVFormat2.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getNullString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuote(character0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.MYSQL.withNullString((String) null);
      char char0 = 'P';
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('P');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowDuplicateHeaderNames(false);
      cSVFormat2.getAutoFlush();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      cSVFormat3.withRecordSeparator('h');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('x');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.TDF.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.getCommentMarker();
      cSVFormat2.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("?zW=8?R_Oki#G'sd8~");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat3.EXCEL.withIgnoreHeaderCase(true);
      cSVFormat4.withAllowMissingColumnNames(true);
      Double double0 = new Double((-714.1211973253072));
      try { 
        MockURI.URI(" SkipHeaderRecord:", "?zW=8?R_Oki#G'sd8~", "", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0:  SkipHeaderRecord:://%3FzW=8%3FR_Oki%23G'sd8~?#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('z');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker('z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('z')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.getQuoteMode();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = objectArray0[1];
      cSVFormat1.MONGODB_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withSystemRecordSeparator();
      Character character0 = new Character('?');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('o');
      cSVFormat4.DEFAULT.hashCode();
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker(character0);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      String string0 = cSVFormat6.ORACLE.toString();
      assertEquals("Delimiter=<,> Escape=<\\> QuoteChar=<\"> QuoteMode=<MINIMAL> NullString=<\\N> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(false);
      CSVFormat cSVFormat8 = cSVFormat7.EXCEL.withCommentMarker('B');
      assertTrue(cSVFormat8.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat9 = cSVFormat7.withFirstRecordAsHeader();
      CSVFormat cSVFormat10 = cSVFormat9.POSTGRESQL_TEXT.withTrailingDelimiter();
      assertTrue(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getTrim());
      
      cSVFormat9.INFORMIX_UNLOAD.withEscape('o');
      assertFalse(cSVFormat9.getAutoFlush());
      
      cSVFormat1.hashCode();
      CSVFormat cSVFormat11 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat12 = CSVFormat.newFormat('?');
      String string1 = cSVFormat1.EXCEL.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat6;
      cSVFormat12.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat12.MONGODB_TSV.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat12.getIgnoreEmptyLines());
      
      cSVFormat5.withAllowDuplicateHeaderNames(false);
      assertFalse(cSVFormat5.getTrim());
      
      cSVFormat3.printer();
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getAllowDuplicateHeaderNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertTrue(cSVFormat2.getIgnoreHeaderCase());
      
      cSVFormat7.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000006");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(102).when(resultSetMetaData0).getColumnCount();
      doReturn("EtefP!x%p:jf^", "EtefP!x%p:jf^", "MySQL", "charset", "Zs7GDPXg{\"XhsV$!").when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      char char0 = 'l';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('l');
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("uZkyzeTfe,M6&U+: nn");
      cSVFormat5.POSTGRESQL_CSV.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat6 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat5.getAutoFlush();
      MockFile mockFile0 = new MockFile("", "uZkyzeTfe,M6&U+: nn");
      Charset.forName("Default");
      cSVFormat2.printer();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat7.hashCode();
      cSVFormat3.withEscape('3');
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Oracle;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.DEFAULT.toString();
      cSVFormat1.MYSQL.withEscape('S');
      CSVFormat.newFormat('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(startline ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      cSVFormat1.println(mockPrintWriter0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.withIgnoreHeaderCase(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.DEFAULT.withHeader(resultSet0);
      cSVFormat0.getHeader();
      cSVFormat0.toString();
      cSVFormat4.withAllowDuplicateHeaderNames();
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withNullString("[nkVnq(q#KWy&?^+{(");
      objectArray0[0] = (Object) cSVFormat0;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.MYSQL.parse(pipedReader0);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat0.MYSQL.printer();
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      cSVFormat0.getNullString();
      cSVFormat0.getQuoteCharacter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString((String) null);
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withIgnoreSurroundingSpaces(true);
      cSVFormat5.POSTGRESQL_TEXT.withDelimiter('5');
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000012,org.apache.commons.csv.CSVFormat@0000000012,org.apache.commons.csv.CSVFormat@0000000012,org.apache.commons.csv.CSVFormat@0000000012,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000012,org.apache.commons.csv.CSVFormat@0000000012,org.apache.commons.csv.CSVFormat@0000000012");
      cSVFormat6.DEFAULT.withSkipHeaderRecord();
      cSVFormat2.getQuoteCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MongoDBTsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('M');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eNeP^}!2j");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('M');
      cSVFormat2.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      Character character0 = new Character('<');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowDuplicateHeaderNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat5 = cSVFormat0.INFORMIX_UNLOAD.withAllowDuplicateHeaderNames();
      CSVFormat cSVFormat6 = cSVFormat0.withEscape('{');
      CSVFormat cSVFormat7 = cSVFormat6.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
      cSVFormat7.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat8 = cSVFormat6.withHeader(class0);
      CSVFormat cSVFormat9 = cSVFormat8.withNullString("");
      cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('{');
      cSVFormat8.MONGODB_TSV.withQuote(character0);
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat9.getNullString();
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('G');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat3.MYSQL.parse(pipedReader0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat4.TDF.withQuote('G');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      StringReader stringReader0 = new StringReader("");
      cSVFormat3.POSTGRESQL_TEXT.parse(stringReader0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat4.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[6];
      cSVFormat4.POSTGRESQL_CSV.withHeaderComments(stringArray0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Zj(+95v_9bv";
      cSVFormat3.MONGODB_TSV.withHeader(stringArray0);
      cSVFormat4.MONGODB_CSV.withIgnoreEmptyLines();
      cSVFormat8.withSkipHeaderRecord(true);
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat7.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      cSVFormat0.EXCEL.printer();
      Character character0 = new Character('<');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x^W#V_<3fdjIjlHS";
      stringArray0[1] = "x^W#V_<3fdjIjlHS";
      stringArray0[2] = "x^W#V_<3fdjIjlHS";
      stringArray0[3] = "x^W#V_<3fdjIjlHS";
      stringArray0[4] = "x^W#V_<3fdjIjlHS";
      stringArray0[5] = "x^W#V_<3fdjIjlHS";
      stringArray0[6] = "x^W#V_<3fdjIjlHS";
      stringArray0[7] = "x^W#V_<3fdjIjlHS";
      stringArray0[8] = "x^W#V_<3fdjIjlHS";
      cSVFormat3.withHeader(stringArray0);
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.MYSQL.printer();
      cSVFormat3.TDF.withCommentMarker('<');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('g');
      cSVFormat1.toString();
      cSVFormat1.withNullString("x^W#V_<3fdjIjlHS");
      cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat3.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      char char0 = 'l';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('l');
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVFormat cSVFormat5 = CSVFormat.MONGODB_CSV;
      Charset.forName("Default");
      cSVFormat2.printer();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat3.withEscape('3');
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("$VALUES");
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.isCommentMarkerSet();
      cSVFormat2.POSTGRESQL_CSV.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withTrailingDelimiter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$VALUES";
      cSVFormat2.RFC4180.withAllowMissingColumnNames(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.RFC4180.print((Object) cSVFormat2, (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Character character0 = Character.valueOf('D');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat1.RFC4180.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withNullString("");
      cSVFormat3.getIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.allocate(124);
      cSVFormat0.println(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      char char0 = '7';
      Character character0 = Character.valueOf('7');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowDuplicateHeaderNames();
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('7')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.RFC4180.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Character character0 = new Character('\'');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withIgnoreSurroundingSpaces(true);
      cSVFormat6.MYSQL.withAllowMissingColumnNames();
      cSVFormat4.getHeaderComments();
      cSVFormat2.withRecordSeparator('\'');
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Character.valueOf('\'');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withIgnoreSurroundingSpaces(true);
      cSVFormat5.MYSQL.withAllowMissingColumnNames();
      cSVFormat3.getHeaderComments();
      cSVFormat2.withRecordSeparator('\'');
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      char char0 = 'l';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('l');
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("uZkyzeTfe,M6&U+: nn");
      cSVFormat5.POSTGRESQL_CSV.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat6 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat5.getAutoFlush();
      MockFile mockFile0 = new MockFile("", "uZkyzeTfe,M6&U+: nn");
      Charset.forName("Default");
      cSVFormat2.printer();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat7.hashCode();
      cSVFormat3.withEscape('3');
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("$VALUES");
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.isCommentMarkerSet();
      cSVFormat2.POSTGRESQL_CSV.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withTrailingDelimiter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$VALUES";
      CSVFormat cSVFormat4 = cSVFormat2.RFC4180.withAllowMissingColumnNames(false);
      cSVFormat3.withHeader(stringArray0);
      cSVFormat3.getTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(resultSet0);
      cSVFormat5.getDelimiter();
      cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = new Character('c');
      cSVFormat5.MYSQL.withCommentMarker(character0);
      cSVFormat4.isCommentMarkerSet();
      cSVFormat5.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('g');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      cSVFormat3.POSTGRESQL_CSV.printer();
      CSVFormat.newFormat('g');
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.MONGODB_CSV.withHeader(resultSet0);
      Character character0 = new Character('c');
      CSVFormat cSVFormat5 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat0.withTrim(false);
      cSVFormat6.TDF.withQuote('G');
      cSVFormat2.MYSQL.hashCode();
      cSVFormat5.withCommentMarker('*');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character1 = new Character('g');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('g')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames(true);
      char char0 = '`';
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('`');
      Object[] objectArray0 = new Object[0];
      cSVFormat2.RFC4180.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.ORACLE.withDelimiter('`');
      cSVFormat3.ORACLE.toString();
      Character character0 = new Character('`');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(false);
      cSVFormat2.POSTGRESQL_CSV.withEscape('G');
      cSVFormat1.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('s');
      cSVFormat0.INFORMIX_UNLOAD.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("TOKEN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.TOKEN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      cSVFormat2.TDF.withAllowDuplicateHeaderNames(true);
      cSVFormat0.getQuoteMode();
      cSVFormat0.getTrim();
      String string0 = null;
      String string1 = "\r\n";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
          CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
          QuoteMode quoteMode0 = QuoteMode.ALL;
          CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
          Character character0 = new Character('2');
          cSVFormat2.TDF.withQuote(character0);
          CSVFormat cSVFormat3 = cSVFormat0.TDF.withDelimiter('2');
          Object[] objectArray0 = new Object[9];
          objectArray0[0] = (Object) character0;
          Object object0 = new Object();
          objectArray0[1] = object0;
          objectArray0[2] = (Object) cSVFormat3;
          objectArray0[3] = (Object) cSVFormat1;
          objectArray0[4] = (Object) quoteMode0;
          Object object1 = new Object();
          objectArray0[5] = object1;
          objectArray0[6] = (Object) cSVFormat3;
          Object object2 = new Object();
          objectArray0[7] = object2;
          objectArray0[8] = (Object) character0;
          cSVFormat3.MONGODB_CSV.withHeaderComments(objectArray0);
          char char0 = 'm';
          cSVFormat1.EXCEL.withCommentMarker('m');
          CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
          cSVFormat4.RFC4180.withSystemRecordSeparator();
          cSVFormat4.INFORMIX_UNLOAD.hashCode();
          cSVFormat2.getIgnoreEmptyLines();
          MockFile mockFile0 = new MockFile(".ty");
          cSVFormat4.DEFAULT.withSkipHeaderRecord();
          Path path0 = mockFile0.toPath();
          cSVFormat0.MONGODB_TSV.printer();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat1.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".ty\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.WindowsChannelFactory.open(WindowsChannelFactory.java:295)
             // sun.nio.fs.WindowsChannelFactory.newFileChannel(WindowsChannelFactory.java:162)
             // sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:225)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1278)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      cSVFormat1.POSTGRESQL_TEXT.printer();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withSystemRecordSeparator();
      cSVFormat2.EXCEL.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.MONGODB_TSV.withIgnoreSurroundingSpaces();
      cSVFormat5.MONGODB_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      cSVFormat6.TDF.printer();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat4.isCommentMarkerSet();
      cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat0.withAutoFlush(false);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat4.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.getTrim();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator('8');
      cSVFormat2.withEscape('s');
      CharBuffer charBuffer0 = CharBuffer.allocate(2010);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) cSVFormat0, (Appendable) charBuffer1, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Character character0 = Character.valueOf('a');
      cSVFormat0.withCommentMarker(character0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('F');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PostgreSQLCsv";
      stringArray0[1] = "inputStream";
      stringArray0[2] = "ALL";
      stringArray0[3] = "";
      stringArray0[4] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("PostgreSQLCsv", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat2.print((Object) null, (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      char char0 = 'g';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('g');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('g');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('g')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      String[] stringArray0 = new String[0];
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines();
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.getHeader();
      cSVFormat1.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      char char0 = '7';
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('7');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat2.MYSQL.withNullString("942w1&");
      cSVFormat4.EXCEL.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      cSVFormat5.withIgnoreHeaderCase();
      cSVFormat5.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      cSVFormat5.MONGODB_CSV.withQuote('7');
      cSVFormat5.printer();
      CSVFormat cSVFormat6 = cSVFormat3.withAllowDuplicateHeaderNames();
      cSVFormat1.DEFAULT.withTrim(true);
      cSVFormat6.TDF.withRecordSeparator('7');
      Class<QuoteMode> class0 = QuoteMode.class;
      Long long0 = new Long(0L);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat6.DEFAULT.print((Object) long0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
      cSVFormat0.MONGODB_TSV.withEscape('G');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat3.EXCEL.hashCode();
      CSVFormat cSVFormat6 = cSVFormat5.MONGODB_CSV.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat6.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat7.ORACLE.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.getRecordSeparator();
      Character character0 = new Character('2');
      cSVFormat2.withEscape(character0);
      cSVFormat1.getDelimiter();
      String string0 = "&9\\|Bi%qf.";
      try { 
        MockURI.URI("\n", "q1.g}+I;I<[M6+~d?6", "q1.g}+I;I<[M6+~d?6", "&9|Bi%qf.", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 
         // ://q1.g%7D+I;I%3C[M6+~d%3F6q1.g%7D+I;I%3C%5BM6+~d%3F6?&9%7CBi%25qf.
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('w');
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withNullString("\r\n");
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat5.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('1');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      Class<QuoteMode> class0 = QuoteMode.class;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withHeader(resultSet0);
      cSVFormat4.withHeader(class0);
      cSVFormat4.equals(quoteMode0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat6.getAllowDuplicateHeaderNames();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat1.withHeader(resultSet1);
      cSVFormat7.TDF.withFirstRecordAsHeader();
      CSVFormat cSVFormat8 = cSVFormat7.MONGODB_CSV.withSystemRecordSeparator();
      cSVFormat8.RFC4180.withTrailingDelimiter();
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat9 = cSVFormat3.withCommentMarker('e');
      cSVFormat9.DEFAULT.withAllowDuplicateHeaderNames();
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat5.getTrailingDelimiter();
      CSVFormat cSVFormat10 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat10.MONGODB_CSV.withTrim(true);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat10.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.getHeaderComments();
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char char0 = 'x';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('x');
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) 'g';
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) 'x';
      cSVFormat3.INFORMIX_UNLOAD.printRecord(stringWriter2, objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape('x');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('x')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.getDelimiter();
      cSVFormat0.getAllowDuplicateHeaderNames();
      cSVFormat1.withEscape('.');
      Double double0 = new Double((-916.56664979));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        Charset.forName("zj8CZ:");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // zj8CZ:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      char char0 = 'l';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('l');
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("uZkyzeTfe,M6&U+: nn");
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_CSV.withAllowDuplicateHeaderNames(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.MONGODB_CSV.withHeader(class0);
      CSVFormat cSVFormat7 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat5.getAutoFlush();
      MockFile mockFile0 = new MockFile("", "uZkyzeTfe,M6&U+: nn");
      Charset charset0 = Charset.forName("Default");
      cSVFormat1.print((File) mockFile0, charset0);
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat7.hashCode();
      cSVFormat3.withEscape('3');
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowDuplicateHeaderNames();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.MONGODB_TSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("=yrew(Bd6789A{WSPMD");
      CSVFormat cSVFormat6 = cSVFormat2.ORACLE.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) "=yrew(Bd6789A{WSPMD";
      cSVFormat6.EXCEL.format(objectArray0);
      cSVFormat5.withAllowDuplicateHeaderNames(false);
      cSVFormat4.isNullStringSet();
      cSVFormat3.getRecordSeparator();
      cSVFormat5.getTrim();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      cSVFormat5.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "QuoteChar=<";
      stringArray0[2] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.POSTGRESQL_CSV.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('T');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      Character character0 = new Character('T');
      CSVFormat cSVFormat5 = cSVFormat4.MONGODB_TSV.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat6.withDelimiter('T');
      CSVFormat.newFormat('T');
      cSVFormat5.getAllowDuplicateHeaderNames();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 92);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.INFORMIX_UNLOAD.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.getQuoteCharacter();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat3 = cSVFormat_Predefined0.getFormat();
      cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat0.withAutoFlush(false);
      File file0 = MockFile.createTempFile("MongoDBCsv", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('s');
      cSVFormat4.INFORMIX_UNLOAD_CSV.println(printStream0);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat3.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X*Ns GshTV73;K";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.MONGODB_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_CSV.withNullString("X*Ns GshTV73;K");
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat4.MONGODB_CSV.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withSystemRecordSeparator();
      cSVFormat6.withQuote('B');
      Character character0 = new Character('B');
      cSVFormat2.withCommentMarker(character0);
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withSkipHeaderRecord();
      cSVFormat1.POSTGRESQL_TEXT.withDelimiter(' ');
      cSVFormat1.TDF.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat.newFormat('p');
      Character character0 = Character.valueOf('@');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat0.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.POSTGRESQL_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat6.getTrim();
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat3.getHeader();
      cSVFormat6.printer();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Oracle;
      MockFile mockFile0 = new MockFile(" ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 231);
      cSVFormat4.MONGODB_CSV.withCommentMarker(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      cSVFormat5.print((Object) cSVFormat_Predefined0, (Appendable) mockPrintWriter0, true);
      cSVFormat4.print((Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Oracle;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ":t=; 5Q.R";
      stringArray0[3] = "Header:";
      cSVFormat1.withHeader(stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = new Character('C');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.POSTGRESQL_TEXT.withNullString("':n");
      cSVFormat3.withTrim(false);
      Character.valueOf('{');
      try { 
        rowSetMetaDataImpl0.setSchemaName(92, "&o={-^RN%N=s/n8Ei");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :92
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowDuplicateHeaderNames();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('h');
      cSVFormat3.getDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat0.withQuote('h');
      cSVFormat3.getAllowMissingColumnNames();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Oracle;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.MONGODB_TSV.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat3.getIgnoreHeaderCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.getRecordSeparator();
      cSVFormat4.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.RFC4180.withRecordSeparator((String) null);
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withHeader(class1);
      Object[] objectArray0 = new Object[3];
      cSVFormat1.INFORMIX_UNLOAD.hashCode();
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<N> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat6;
      cSVFormat5.RFC4180.withHeaderComments(objectArray0);
      cSVFormat2.withDelimiter('+');
      cSVFormat6.withRecordSeparator('W');
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Oracle;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat1 = cSVFormat0.MONGODB_CSV.withSkipHeaderRecord();
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "L~^R_9]x##33Ksb";
      stringArray0[3] = "s";
      stringArray0[4] = "TCbp";
      stringArray0[5] = "";
      stringArray0[6] = "";
      cSVFormat0.INFORMIX_UNLOAD.withHeader(stringArray0);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowDuplicateHeaderNames();
      CSVFormat cSVFormat2 = cSVFormat0.withSystemRecordSeparator();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      cSVFormat2.POSTGRESQL_TEXT.withAutoFlush(true);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat1.getDelimiter();
      cSVFormat1.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MONGODB_TSV.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(false);
      cSVFormat0.printer();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.MYSQL.withIgnoreHeaderCase();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('#');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('#');
      cSVFormat3.print((Appendable) charArrayWriter1);
      Double double0 = new Double(0.0);
      cSVFormat2.equals(double0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.MONGODB_TSV.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.toString();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet1);
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat0.isNullStringSet();
      cSVFormat6.withSkipHeaderRecord(true);
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet2).getMetaData();
      cSVFormat4.withHeader(resultSet2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.TDF.withHeader(resultSet0);
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withHeader(class0);
      cSVFormat1.DEFAULT.withAllowMissingColumnNames();
      cSVFormat1.ORACLE.withSkipHeaderRecord();
      cSVFormat0.withAllowDuplicateHeaderNames(false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat_Predefined0.getFormat();
      cSVFormat2.MONGODB_TSV.withIgnoreSurroundingSpaces(false);
      CSVFormat.newFormat(',');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat0.equals(cSVFormat3);
      Object[] objectArray0 = new Object[7];
      cSVFormat2.POSTGRESQL_CSV.hashCode();
      Object object0 = new Object();
      String string0 = "'r9Oo0@QF}&pdkj";
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withAllowDuplicateHeaderNames();
      Character character0 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat2.MONGODB_CSV.print((Object) cSVFormat1, (Appendable) stringBuffer0, true);
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.MONGODB_TSV.withDelimiter('L');
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) quoteMode0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) stringBuffer0;
      cSVFormat3.ORACLE.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      cSVFormat2.withTrailingDelimiter();
      cSVFormat4.hashCode();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("HK@+<e0n];dA@gMC");
      char char0 = 'w';
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.withTrim();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('n');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "HK@+<e0n];dA@gMC");
      // Undeclared exception!
      try { 
        charArrayWriter2.append((CharSequence) "HK@+<e0n];dA@gMC", 124, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withSkipHeaderRecord();
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat1.POSTGRESQL_TEXT.toString();
      cSVFormat1.MONGODB_CSV.printer();
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat2.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat0.withDelimiter(':');
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat0.getQuoteMode();
      cSVFormat0.withQuote('5');
      cSVFormat3.withQuote((Character) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withAllowDuplicateHeaderNames();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1775));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character('A');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('A');
      cSVFormat5.withSystemRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.TDF.withIgnoreSurroundingSpaces();
      cSVFormat2.ORACLE.withIgnoreSurroundingSpaces(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " Crqpw&AuI9#n>(^";
      stringArray0[1] = "";
      stringArray0[2] = "|^`&W^SU/oWg:cF_k";
      cSVFormat0.MONGODB_CSV.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFile mockFile0 = new MockFile("Default");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.print((File) mockFile0, charset0);
      cSVFormat3.getEscapeCharacter();
      File file0 = MockFile.createTempFile("NONE", "NONE");
      MockFile mockFile1 = new MockFile(file0, "|^`&W^SU/oWg:cF_k");
      Charset charset1 = Charset.defaultCharset();
      cSVFormat3.EXCEL.withIgnoreEmptyLines();
      try { 
        cSVFormat3.print((File) mockFile1, charset1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("7vD");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowDuplicateHeaderNames();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "HeaderComments:";
      stringArray0[1] = "Default";
      stringArray0[2] = "6a#i[T08pL~1l0";
      stringArray0[3] = "";
      stringArray0[4] = "";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowDuplicateHeaderNames(false);
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat0.withDelimiter('b');
      Character character0 = Character.valueOf('P');
      cSVFormat4.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('_');
      cSVFormat1.getHeader();
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.getHeader();
      cSVFormat2.withQuote('_');
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append('b');
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(stringWriter1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      MockFile mockFile0 = new MockFile(">vA(@Jyc>vy??jIoK", "xYB!{md");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat1.print((File) mockFile0, charset0);
      cSVFormat0.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('u');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('u')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      MockFile mockFile0 = new MockFile((File) null, "");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withAllowDuplicateHeaderNames(true);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat3.TDF.withQuote('\\');
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat5.withHeader(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.isCommentMarkerSet();
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('~');
      Character.valueOf('o');
      CSVFormat.newFormat('-');
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Character character0 = Character.valueOf('D');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat1.RFC4180.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withNullString("");
      cSVFormat3.getIgnoreSurroundingSpaces();
      CharBuffer charBuffer0 = CharBuffer.allocate(124);
      cSVFormat0.println(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.RFC4180.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowDuplicateHeaderNames();
      cSVFormat3.getIgnoreHeaderCase();
      Object object0 = new Object();
      Character character0 = Character.valueOf('7');
      CSVFormat cSVFormat4 = cSVFormat1.POSTGRESQL_CSV.withEscape(character0);
      cSVFormat4.MONGODB_CSV.withCommentMarker(character0);
      cSVFormat1.equals(object0);
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withQuoteMode(quoteMode0);
      String string0 = "6-j2:vpt\"8;mW";
      cSVFormat1.ORACLE.withIgnoreEmptyLines(false);
      MockFile mockFile0 = new MockFile("6-j2:vpt\"8;mW", "6-j2:vpt\"8;mW");
      cSVFormat3.POSTGRESQL_CSV.withTrailingDelimiter();
      File file0 = MockFile.createTempFile("6-j2:vpt\"8;mW", "6-j2:vpt\"8;mW", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "E'FM");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // E'FM
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 'T';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('T');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreSurroundingSpaces();
      boolean boolean0 = false;
      URI uRI0 = MockURI.aFTPURI;
      MockURI.resolve(uRI0, uRI0);
      String string0 = "QuoteMode=<";
      try { 
        MockURI.URI("QuoteMode=<");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 10: QuoteMode=<
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withTrim(true);
      Class<Token.Type> class0 = Token.Type.class;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withRecordSeparator("");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      Object[] objectArray0 = new Object[4];
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.MONGODB_CSV.withHeader(class0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) charsetEncoder0;
      objectArray0[3] = (Object) pipedOutputStream0;
      cSVFormat0.printRecord(outputStreamWriter0, objectArray0);
      cSVFormat1.MONGODB_TSV.withTrim();
      cSVFormat0.getTrailingDelimiter();
      cSVFormat1.printer();
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.withAllowDuplicateHeaderNames();
      MockFile mockFile0 = new MockFile("line.separator", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "line.separator";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      PrintStream printStream1 = mockPrintStream1.printf("", objectArray0);
      cSVFormat0.printRecord(printStream1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('G');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat3.MYSQL.parse(pipedReader0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      cSVFormat4.TDF.withQuote('G');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      StringReader stringReader0 = new StringReader("");
      cSVFormat3.POSTGRESQL_TEXT.parse(stringReader0);
      cSVFormat6.withTrailingDelimiter();
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[6];
      cSVFormat4.POSTGRESQL_CSV.withHeaderComments(stringArray0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "5AB9S5C{r,n3tqgmI_J";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Zj(+95v_9bv";
      cSVFormat3.MONGODB_TSV.withHeader(stringArray0);
      cSVFormat7.withSkipHeaderRecord(true);
      cSVFormat1.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.RFC4180.toString();
      cSVFormat1.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.MONGODB_CSV.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('|');
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreSurroundingSpaces(true);
      cSVFormat2.MONGODB_TSV.hashCode();
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('|')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "q[";
      stringArray0[1] = "WJ&0.zj";
      stringArray0[2] = "kg8,V}|a";
      stringArray0[3] = "x=I_f:3";
      stringArray0[4] = "zP ]>6>wN/:";
      cSVFormat1.MONGODB_CSV.withHeader(stringArray0);
      boolean boolean0 = false;
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.DEFAULT.toString();
      cSVFormat0.getQuoteMode();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('q');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withQuote('P');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[2] = "";
      stringArray0[3] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[4] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[5] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withAutoFlush(true);
      stringArray0[6] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat4 = cSVFormat0.withHeader(stringArray0);
      cSVFormat4.RFC4180.withIgnoreHeaderCase();
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat4.RFC4180.withTrim();
      cSVFormat2.withQuote('g');
      CSVFormat cSVFormat5 = cSVFormat3.MYSQL.withQuoteMode((QuoteMode) null);
      cSVFormat4.isCommentMarkerSet();
      cSVFormat2.isCommentMarkerSet();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.getTrim();
      cSVFormat3.isCommentMarkerSet();
      CSVFormat.newFormat('v');
      CSVFormat.Predefined.values();
      cSVFormat5.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.withSystemRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat1.MONGODB_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('\'');
      cSVFormat1.EXCEL.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("qM2Yyz");
      CSVFormat cSVFormat3 = cSVFormat2.MONGODB_CSV.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.MONGODB_CSV.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_CSV.withNullString("-");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "qM2Yyz";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = "qM2Yyz";
      stringArray0[4] = "-";
      stringArray0[5] = "qM2Yyz";
      cSVFormat6.TDF.withHeader(stringArray0);
      cSVFormat1.TDF.printer();
      cSVFormat2.getAllowDuplicateHeaderNames();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("qM2Yyz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.qM2Yyz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withSkipHeaderRecord(true);
      String string0 = null;
      char char0 = 'Z';
      Character character0 = Character.valueOf('Z');
      cSVFormat0.TDF.withCommentMarker(character0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('O');
      Character character0 = new Character('i');
      cSVFormat1.TDF.format(objectArray0);
      cSVFormat2.EXCEL.withCommentMarker(character0);
      Character character1 = new Character('$');
      cSVFormat1.MONGODB_TSV.withCommentMarker(character1);
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withDelimiter('L');
      cSVFormat3.MYSQL.withCommentMarker('A');
      cSVFormat0.withQuote('>');
      cSVFormat0.getEscapeCharacter();
      URI uRI0 = MockURI.URI("S");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(')');
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowDuplicateHeaderNames(true);
      cSVFormat5.withCommentMarker('a');
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "mx]k";
      stringArray0[2] = "C<";
      stringArray0[3] = "6dWO;:'vp,X";
      stringArray0[4] = "kj:S)x";
      stringArray0[5] = "org.apache.commons.csv.CSVFormat$Predefined";
      stringArray0[6] = "";
      stringArray0[7] = "!\"j[z^Q(uXUl";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('5');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.withRecordSeparator("9");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.ORACLE.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('=');
      cSVFormat2.isQuoteCharacterSet();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowDuplicateHeaderNames(true);
      cSVFormat4.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = Character.valueOf('<');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat1.TDF.withRecordSeparator((String) null);
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat1.withSystemRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withNullString("q4=,?@?KR4$");
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.MYSQL.withNullString("q4=,?@?KR4$");
      cSVFormat4.DEFAULT.withAllowMissingColumnNames();
      cSVFormat1.DEFAULT.toString();
      cSVFormat4.getQuoteMode();
      CSVFormat cSVFormat5 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat5.hashCode();
      CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.printer();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getHeader();
      cSVFormat0.withSystemRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = 'u';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('u');
      String string0 = "";
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withHeader(class0);
      MockFile mockFile0 = new MockFile("N/J4RDI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat2.MONGODB_CSV.println(mockPrintWriter0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HeaderComments:";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Fh?Kf2JL";
      stringArray0[4] = "s7`'_rF!LX$(1";
      stringArray0[5] = "OH$F jTd9}z3H;";
      cSVFormat0.MONGODB_TSV.withHeader(stringArray0);
      cSVFormat0.POSTGRESQL_TEXT.printer();
      cSVFormat0.withTrim();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withRecordSeparator('B');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      cSVFormat4.TDF.withIgnoreEmptyLines(true);
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat4.getNullString();
      CSVFormat cSVFormat5 = cSVFormat0.withQuote('u');
      cSVFormat5.DEFAULT.withQuote((Character) null);
      cSVFormat5.isEscapeCharacterSet();
      CSVFormat cSVFormat6 = cSVFormat1.MYSQL.withIgnoreHeaderCase(false);
      cSVFormat6.withHeader(class0);
      CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('w');
      cSVFormat7.getHeader();
      cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat3.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote((Character) null);
      cSVFormat4.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withNullString("q4=,?@?KR4$");
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.MYSQL.withNullString("q4=,?@?KR4$");
      cSVFormat1.DEFAULT.toString();
      cSVFormat4.getQuoteMode();
      CSVFormat cSVFormat5 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat5.hashCode();
      CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.printer();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.ORACLE.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.withRecordSeparator("SJTTz<yYnWE");
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.MONGODB_CSV.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("org.apache.commons.csv.CSVPrinter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVPrinter
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowDuplicateHeaderNames();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('c');
      CSVFormat cSVFormat2 = cSVFormat1.ORACLE.withCommentMarker('j');
      cSVFormat2.MONGODB_TSV.hashCode();
      cSVFormat0.getTrailingDelimiter();
      cSVFormat0.getAllowDuplicateHeaderNames();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat4 = cSVFormat0.POSTGRESQL_CSV.withIgnoreEmptyLines(true);
      cSVFormat4.EXCEL.withNullString("c");
      stringArray0[0] = "c";
      PipedReader pipedReader0 = new PipedReader(1416);
      cSVFormat3.MONGODB_CSV.parse(pipedReader0);
      stringArray0[1] = "org.apache.commons.csv.CSVFormat$1";
      cSVFormat3.ORACLE.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      cSVFormat3.isQuoteCharacterSet();
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.getTrim();
      cSVFormat5.withSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("mc=n'!Z ");
      // Undeclared exception!
      try { 
        mockFile0.toPath();
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('3');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('3');
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      Float float0 = new Float(1084.1);
      cSVFormat4.equals(float0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat1.isQuoteCharacterSet();
      cSVFormat0.MONGODB_CSV.withIgnoreHeaderCase(true);
      cSVFormat2.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      Appendable appendable0 = null;
      CSVFormat.newFormat('U');
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat3.getIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('`');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(']');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Zz*xQun\"gnVR!0t-");
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (']')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      cSVFormat5.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withHeader(class0);
      cSVFormat1.EXCEL.withCommentMarker('V');
      cSVFormat1.DEFAULT.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.ORACLE.withSkipHeaderRecord();
      cSVFormat2.POSTGRESQL_CSV.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowDuplicateHeaderNames(false);
      cSVFormat3.printer();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      cSVFormat1.RFC4180.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.POSTGRESQL_TEXT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.RFC4180.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat5;
      cSVFormat6.RFC4180.format(objectArray0);
      cSVFormat2.MONGODB_CSV.withIgnoreEmptyLines();
      cSVFormat3.EXCEL.withTrim(false);
      cSVFormat4.equals(cSVFormat1);
      cSVFormat0.getQuoteCharacter();
      cSVFormat6.getTrim();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.MONGODB_CSV.withIgnoreEmptyLines(true);
      cSVFormat2.withSystemRecordSeparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('}');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('v');
      cSVFormat6.DEFAULT.withRecordSeparator('v');
      CSVFormat cSVFormat7 = cSVFormat5.MONGODB_TSV.withAllowMissingColumnNames();
      cSVFormat7.POSTGRESQL_TEXT.withQuote(character0);
      cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat5.isQuoteCharacterSet();
      CharBuffer charBuffer0 = CharBuffer.allocate(124);
      cSVFormat0.print((Object) cSVFormat1, (Appendable) charBuffer0, false);
      cSVFormat2.getAutoFlush();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.withRecordSeparator(":U8 ?jE2Oo~!;FnJp~U");
      cSVFormat4.getQuoteMode();
      cSVFormat2.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.getHeaderComments();
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("TDF");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.getAllowDuplicateHeaderNames();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.RFC4180.withCommentMarker('5');
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.POSTGRESQL_CSV.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(';');
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String string0 = "";
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      boolean boolean0 = true;
      cSVFormat2.withTrim(true);
      char char0 = 'W';
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      boolean boolean0 = true;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.DEFAULT.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      Character character0 = Character.valueOf('(');
      cSVFormat2.MYSQL.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('G');
      cSVFormat5.INFORMIX_UNLOAD.withDelimiter('8');
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat0.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The comment start and the escape character cannot be the same ('");
      char char0 = '1';
      cSVFormat0.MYSQL.hashCode();
      Character character0 = new Character('^');
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withQuote(character0);
      cSVFormat2.POSTGRESQL_TEXT.withAllowDuplicateHeaderNames(true);
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withEscape(character0);
      cSVFormat3.withEscape(character0);
      Character character1 = Character.valueOf('1');
      cSVFormat1.MONGODB_CSV.withAllowDuplicateHeaderNames();
      cSVFormat1.withCommentMarker(character1);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      cSVFormat3.EXCEL.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[0];
      cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1552, 1552);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowDuplicateHeaderNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.ORACLE.withAutoFlush(true);
      cSVFormat2.hashCode();
      cSVFormat0.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSystemRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat5.hashCode();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('%');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('m');
      cSVFormat5.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withRecordSeparator((String) null);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        cSVFormat1.POSTGRESQL_CSV.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
      cSVFormat2.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.MONGODB_TSV.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withTrim();
      cSVFormat1.getNullString();
      cSVFormat1.isNullStringSet();
      cSVFormat2.MYSQL.withAllowDuplicateHeaderNames();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowDuplicateHeaderNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat3.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
      Object[] objectArray0 = new Object[6];
      cSVFormat0.RFC4180.withEscape((Character) null);
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      try { 
        MockURI.URI("MySQL", "InformixUnloadCsv", "MySQL", 124, "MySQL", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: MySQL://InformixUnloadCsv@MySQL:124MySQL?#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = new Character('J');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('J')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      cSVFormat0.EXCEL.withCommentMarker('#');
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      cSVFormat0.withEscape('|');
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.POSTGRESQL_TEXT.withEscape('O');
      CSVFormat.newFormat('N');
      cSVFormat0.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yz?KS");
      mockFileOutputStream0.write(9);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.EXCEL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      cSVFormat1.POSTGRESQL_CSV.println(mockPrintStream0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowDuplicateHeaderNames(false);
      cSVFormat2.RFC4180.toString();
      cSVFormat2.RFC4180.withSkipHeaderRecord(false);
      cSVFormat2.withNullString("");
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat3 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) "Yz?KS";
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat3.INFORMIX_UNLOAD_CSV.format(objectArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, (-2247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_dZN~s";
      stringArray0[1] = " IgnoreHeaderCase:ignored";
      stringArray0[2] = "hNp7_kuT0(2";
      stringArray0[3] = "";
      CSVFormat cSVFormat1 = cSVFormat0.MONGODB_TSV.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("jVA");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("hNp7_kuT0(2", (Object[]) stringArray0);
      cSVFormat1.MONGODB_CSV.printRecord(printWriter0, stringArray0);
      cSVFormat0.MYSQL.toString();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker((Character) null);
      CSVFormat cSVFormat5 = cSVFormat4.ORACLE.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.ORACLE.withTrim();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat6.MYSQL.withIgnoreSurroundingSpaces(true);
      objectArray0[1] = (Object) cSVFormat4;
      CSVFormat cSVFormat7 = cSVFormat3.POSTGRESQL_CSV.withTrailingDelimiter();
      cSVFormat7.ORACLE.withRecordSeparator("MNEygUw4s");
      assertTrue(cSVFormat7.getTrailingDelimiter());
      
      objectArray0[2] = (Object) cSVFormat5;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat2;
      CSVFormat cSVFormat8 = cSVFormat5.TDF.withEscape('x');
      assertEquals('x', (char)cSVFormat8.getEscapeCharacter());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      CSVFormat cSVFormat9 = cSVFormat6.DEFAULT.withAutoFlush(true);
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.isEscapeCharacterSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      
      objectArray0[7] = object1;
      cSVFormat6.TDF.format(objectArray0);
      boolean boolean0 = cSVFormat4.getIgnoreEmptyLines();
      cSVFormat2.getHeaderComments();
      cSVFormat4.getDelimiter();
      Float float0 = new Float((-1.0));
      cSVFormat2.equals(float0);
      cSVFormat2.getAutoFlush();
      boolean boolean1 = cSVFormat5.getAllowMissingColumnNames();
      assertTrue(boolean1 == boolean0);
      assertTrue(cSVFormat3.getAllowDuplicateHeaderNames());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.getTrim());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withSystemRecordSeparator();
      Character character0 = new Character('?');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('o');
      cSVFormat4.DEFAULT.hashCode();
      cSVFormat2.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat5.ORACLE.toString();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat6.EXCEL.withCommentMarker('B');
      CSVFormat cSVFormat7 = cSVFormat6.withFirstRecordAsHeader();
      CSVFormat cSVFormat8 = cSVFormat7.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat8.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat7.INFORMIX_UNLOAD.withEscape('o');
      cSVFormat1.hashCode();
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat9 = CSVFormat.newFormat('?');
      cSVFormat1.EXCEL.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat5;
      cSVFormat9.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat9.MONGODB_TSV.withQuoteMode(quoteMode0);
      cSVFormat0.withAllowDuplicateHeaderNames(false);
      cSVFormat3.printer();
      cSVFormat9.withDelimiter('o');
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.MONGODB_TSV.withEscape('A');
      String string0 = "reader";
      URI uRI0 = MockURI.URI((String) null, "x`zk;DV7%Zn+%$t>}", "reader", "reader", "x`zk;DV7%Zn+%$t>}");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat_Predefined0.getFormat();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat2.MONGODB_TSV.withIgnoreSurroundingSpaces(false);
      CSVFormat.newFormat(',');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      cSVFormat0.equals(cSVFormat3);
      Object[] objectArray0 = new Object[7];
      cSVFormat2.POSTGRESQL_CSV.hashCode();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withAllowDuplicateHeaderNames();
      Character character0 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      Character character0 = new Character('o');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat.newFormat('o');
      cSVFormat0.RFC4180.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.MONGODB_CSV.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat2.MYSQL.format(objectArray0);
      cSVFormat3.TDF.withTrailingDelimiter(false);
      cSVFormat2.ORACLE.withIgnoreSurroundingSpaces();
      cSVFormat2.getTrailingDelimiter();
      String string0 = "";
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
