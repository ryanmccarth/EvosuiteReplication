/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 22 19:19:28 GMT 2020
 */

package org.templateit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.templateit.Reference;
import org.templateit.Region;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Region_ESTest extends Region_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference(472, 472);
      region0.setEndReference(reference0);
      Reference reference1 = new Reference(472, 0);
      region0.setStartReference(reference1);
      boolean boolean0 = region0.contains(reference1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference((-4169), (-4169));
      region0.setEndReference(reference0);
      region0.setStartReference(reference0);
      boolean boolean0 = region0.contains(reference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference(0, 0);
      region0.setEndReference(reference0);
      Reference reference1 = new Reference((-1), 1253);
      region0.setStartReference(reference1);
      boolean boolean0 = region0.contains(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reference reference0 = new Reference(1, 1);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = new Reference((-2892), (-2892));
      Region region1 = new Region(reference0, reference1);
      boolean boolean0 = region0.contains(region1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reference reference0 = new Reference((-118), (-118));
      Region region0 = new Region(reference0, reference0);
      boolean boolean0 = region0.contains(region0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference(472, 472);
      Reference reference1 = new Reference(472, 0);
      region0.setStartReference(reference1);
      Region region1 = new Region(reference0, reference1);
      // Undeclared exception!
      try { 
        region0.contains(region1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.templateit.Region", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = region0.start();
      assertNull(reference0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reference reference0 = new Reference(0, 2069);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.start();
      assertEquals(0, reference1.row());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reference reference0 = new Reference((-1162), 0);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.start();
      assertSame(reference0, reference1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reference reference0 = new Reference(1, 1);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.start();
      assertSame(reference1, reference0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = region0.end();
      assertNull(reference0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reference reference0 = new Reference(2272, 0);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.end();
      assertSame(reference1, reference0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reference reference0 = new Reference(0, 2069);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.end();
      assertSame(reference0, reference1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference((-3167), 0);
      // Undeclared exception!
      try { 
        region0.contains(reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.templateit.Region", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reference reference0 = new Reference(2272, 0);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = new Reference(2272, 2272);
      boolean boolean0 = region0.contains(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference(472, 472);
      region0.setEndReference(reference0);
      Reference reference1 = new Reference(472, 0);
      region0.setStartReference(reference0);
      boolean boolean0 = region0.contains(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reference reference0 = new Reference((-1), (-1));
      Region region0 = new Region(reference0, reference0);
      boolean boolean0 = region0.contains(reference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reference reference0 = new Reference(1, 1);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = new Reference((-2892), (-2892));
      boolean boolean0 = region0.contains(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reference reference0 = new Reference(38, 38);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = new Reference((-1), 594);
      region0.setStartReference(reference1);
      region0.setEndReference(reference1);
      Region region1 = new Region();
      region1.setStartReference(reference1);
      region1.setEndReference(reference0);
      boolean boolean0 = region1.contains(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reference reference0 = new Reference(1, 1);
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = new Reference((-2892), (-2892));
      Region region1 = new Region(reference0, reference1);
      boolean boolean0 = region1.contains(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Reference reference0 = new Reference((-1), (-1));
      Region region0 = new Region(reference0, reference0);
      boolean boolean0 = region0.contains(region0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reference reference0 = new Reference(31, 31);
      Region region0 = new Region();
      Reference reference1 = new Reference((-1), 612);
      region0.setStartReference(reference1);
      Region region1 = new Region(reference0, reference1);
      boolean boolean0 = region0.contains(region1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reference reference0 = new Reference(31, 31);
      Region region0 = new Region();
      Reference reference1 = new Reference((-1), 612);
      region0.setStartReference(reference1);
      Region region1 = new Region(reference0, reference1);
      boolean boolean0 = region1.contains(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Region region0 = new Region();
      Reference reference0 = new Reference((-4169), (-4169));
      region0.setEndReference(reference0);
      region0.setStartReference(reference0);
      Reference reference1 = new Reference((-1), (-4169));
      boolean boolean0 = region0.contains(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reference reference0 = new Reference((-1), (-1));
      Region region0 = new Region(reference0, reference0);
      String string0 = region0.toString();
      assertEquals("-1,-1,-1,-1", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reference reference0 = new Reference((-1), (-1));
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.start();
      assertSame(reference0, reference1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reference reference0 = new Reference((-1), (-1));
      Region region0 = new Region(reference0, reference0);
      Reference reference1 = region0.end();
      assertSame(reference1, reference0);
  }
}
