/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 24 19:38:10 GMT 2020
 */

package net.sf.jniinchi;

import org.junit.Test;
import static org.junit.Assert.*;
import net.sf.jniinchi.INCHI_KEY;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class INCHI_KEY_ESTest extends INCHI_KEY_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      INCHI_KEY[] iNCHI_KEYArray0 = INCHI_KEY.values();
      assertEquals(7, iNCHI_KEYArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.valueOf("OK");
      assertEquals(INCHI_KEY.OK, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.valueOf("INVALID_INCHI");
      assertEquals(20, iNCHI_KEY0.getIndx());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      INCHI_KEY.getValue(134);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(21);
      assertEquals(INCHI_KEY.INVALID_STD_INCHI, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(20);
      assertEquals(INCHI_KEY.INVALID_INCHI, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      INCHI_KEY.getValue(19);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      INCHI_KEY.getValue(18);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      INCHI_KEY.getValue(17);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      INCHI_KEY.getValue(16);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      INCHI_KEY.getValue(15);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      INCHI_KEY.getValue(14);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      INCHI_KEY.getValue(13);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      INCHI_KEY.getValue(12);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      INCHI_KEY.getValue(11);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      INCHI_KEY.getValue(10);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      INCHI_KEY.getValue(9);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      INCHI_KEY.getValue(8);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      INCHI_KEY.getValue(7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      INCHI_KEY.getValue(6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      INCHI_KEY.getValue(5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(4);
      assertEquals(INCHI_KEY.NOT_ENOUGH_MEMORY, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(3);
      assertEquals(INCHI_KEY.INVALID_INCHI_PREFIX, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(2);
      assertEquals(INCHI_KEY.EMPTY_INPUT, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(1);
      assertEquals(INCHI_KEY.UNKNOWN_ERROR, iNCHI_KEY0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.getValue(0);
      int int0 = iNCHI_KEY0.getIndx();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      INCHI_KEY iNCHI_KEY0 = INCHI_KEY.NOT_ENOUGH_MEMORY;
      int int0 = iNCHI_KEY0.getIndx();
      assertEquals(4, int0);
  }
}
