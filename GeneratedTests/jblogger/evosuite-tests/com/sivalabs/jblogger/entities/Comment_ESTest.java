/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 26 22:58:29 GMT 2020
 */

package com.sivalabs.jblogger.entities;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sivalabs.jblogger.entities.Comment;
import com.sivalabs.jblogger.entities.Post;
import java.time.LocalDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment();
      boolean boolean0 = comment0.equals(comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      comment0.setUpdatedOn(localDateTime0);
      LocalDateTime localDateTime1 = comment0.getUpdatedOn();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment();
      Post post0 = new Post();
      comment0.setPost(post0);
      Post post1 = comment0.getPost();
      assertSame(post1, post0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setName(", createdOn=");
      String string0 = comment0.getName();
      assertEquals(", createdOn=", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setName("");
      String string0 = comment0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment();
      Integer integer0 = new Integer(0);
      comment0.setId(integer0);
      Integer integer1 = comment0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment();
      Integer integer0 = new Integer(59);
      comment0.setId(integer0);
      Integer integer1 = comment0.getId();
      assertEquals(59, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment();
      Integer integer0 = new Integer((-1));
      comment0.setId(integer0);
      Integer integer1 = comment0.getId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setEmail("Comment(id=59, name=null, email=null, content=null, createdOn=2014-02-14T20:21:21.320, updatedOn=null, post=Post(id=null, title=null, url=null, content=_G, shortDescription=null, createdBy=User(id=null, name=null, email=null, password=null, roles=[]), createdOn=2014-02-14T20:21:21.320, updatedOn=null, viewCount=0, tags=null, comments=[]))");
      String string0 = comment0.getEmail();
      assertEquals("Comment(id=59, name=null, email=null, content=null, createdOn=2014-02-14T20:21:21.320, updatedOn=null, post=Post(id=null, title=null, url=null, content=_G, shortDescription=null, createdBy=User(id=null, name=null, email=null, password=null, roles=[]), createdOn=2014-02-14T20:21:21.320, updatedOn=null, viewCount=0, tags=null, comments=[]))", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setEmail("");
      String string0 = comment0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setCreatedOn((LocalDateTime) null);
      LocalDateTime localDateTime0 = comment0.getCreatedOn();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setContent("R/OF~5>yx}$");
      String string0 = comment0.getContent();
      assertEquals("R/OF~5>yx}$", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setContent("");
      String string0 = comment0.getContent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment();
      String string0 = comment0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comment comment0 = new Comment();
      LocalDateTime localDateTime0 = comment0.getUpdatedOn();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment();
      String string0 = comment0.getContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment();
      Post post0 = comment0.getPost();
      assertNull(post0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment();
      String string0 = comment0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment();
      Integer integer0 = comment0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment();
      Post post0 = new Post();
      comment0.setPost(post0);
      Comment comment1 = new Comment();
      assertFalse(comment1.equals((Object)comment0));
      
      comment1.setPost(post0);
      boolean boolean0 = comment0.equals(comment1);
      assertTrue(comment1.equals((Object)comment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setEmail("com.sivalabs.jblogger.entities.Comment");
      Comment comment1 = new Comment();
      comment1.setEmail("com.sivalabs.jblogger.entities.Comment");
      assertTrue(comment1.equals((Object)comment0));
      
      Post post0 = new Post();
      comment1.setPost(post0);
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment();
      Post post0 = new Post();
      comment0.setPost(post0);
      Comment comment1 = new Comment();
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      LocalDateTime localDateTime0 = comment1.getCreatedOn();
      comment0.setUpdatedOn(localDateTime0);
      assertFalse(comment1.equals((Object)comment0));
      
      comment1.setUpdatedOn(localDateTime0);
      boolean boolean0 = comment0.equals(comment1);
      assertTrue(comment1.equals((Object)comment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment();
      LocalDateTime localDateTime0 = comment0.getCreatedOn();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      comment1.setUpdatedOn(localDateTime0);
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      LocalDateTime localDateTime0 = comment1.getCreatedOn();
      assertTrue(comment1.equals((Object)comment0));
      
      comment0.setUpdatedOn(localDateTime0);
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setCreatedOn((LocalDateTime) null);
      Comment comment1 = new Comment();
      assertFalse(comment1.equals((Object)comment0));
      
      comment1.setCreatedOn((LocalDateTime) null);
      boolean boolean0 = comment0.equals(comment1);
      assertTrue(comment1.equals((Object)comment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setCreatedOn((LocalDateTime) null);
      Comment comment1 = new Comment();
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setContent(",");
      Comment comment1 = new Comment();
      assertFalse(comment1.equals((Object)comment0));
      
      comment1.setContent(",");
      boolean boolean0 = comment0.equals(comment1);
      assertTrue(comment1.equals((Object)comment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      comment1.setContent("");
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      comment0.setName("n");
      comment1.setName("n");
      assertTrue(comment1.equals((Object)comment0));
      
      comment0.setContent("*f4z$rK(E >");
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      comment1.setEmail("");
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setEmail("com.sivalabs.jblogger.entities.Comment");
      Comment comment1 = new Comment();
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      comment1.setName("n");
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      comment0.setName("n");
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      Integer integer0 = new Integer(1);
      comment0.setId(integer0);
      assertFalse(comment0.equals((Object)comment1));
      
      comment1.setId(integer0);
      boolean boolean0 = comment0.equals(comment1);
      assertTrue(comment0.equals((Object)comment1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      Integer integer0 = new Integer(1);
      comment1.setId(integer0);
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      Integer integer0 = new Integer(1);
      comment0.setId(integer0);
      boolean boolean0 = comment0.equals(comment1);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comment comment0 = new Comment();
      boolean boolean0 = comment0.equals(",");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comment comment0 = new Comment();
      Comment comment1 = new Comment();
      assertTrue(comment1.equals((Object)comment0));
      
      comment0.setCreatedOn((LocalDateTime) null);
      boolean boolean0 = comment1.equals(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comment comment0 = new Comment();
      Post post0 = new Post();
      comment0.setPost(post0);
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comment comment0 = new Comment();
      LocalDateTime localDateTime0 = comment0.getCreatedOn();
      comment0.setUpdatedOn(localDateTime0);
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setContent("");
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setEmail("Post(id=");
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setName("<VW+ZeB?Ui\"$~>;x>'^");
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comment comment0 = new Comment();
      Integer integer0 = new Integer(2375);
      comment0.setId(integer0);
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comment comment0 = new Comment();
      comment0.setCreatedOn((LocalDateTime) null);
      comment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comment comment0 = new Comment();
      String string0 = comment0.toString();
      assertEquals("Comment(id=null, name=null, email=null, content=null, createdOn=2014-02-14T20:21:21.320, updatedOn=null, post=null)", string0);
  }
}
