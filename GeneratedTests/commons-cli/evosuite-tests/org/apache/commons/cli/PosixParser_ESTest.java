/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 26 15:40:19 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = posixParser0.flatten((Options) null, stringArray0, true);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken("^/Mhs!s", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "--]");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "-z";
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--]", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "q8Hf7F-o-2z@O";
      stringArray0[1] = "q8Hf7F-o-2z@O";
      stringArray0[2] = "-,";
      // Undeclared exception!
      try { 
        posixParser0.flatten((Options) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "--]");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      String[] stringArray1 = posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--", true);
      posixParser0.flatten(options0, stringArray1, true);
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "--]");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "-z";
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--", true);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "f";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "-z";
      posixParser0.flatten(options0, stringArray0, true);
      posixParser0.burstToken("[ARGL...]", true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[16];
      stringArray0[0] = "org.apache.commons.cli.PosixParser";
      stringArray0[1] = "---zr=Dw[D";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      stringArray0[2] = "--]";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-zr=Dw[D";
      stringArray0[1] = "-";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        posixParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
