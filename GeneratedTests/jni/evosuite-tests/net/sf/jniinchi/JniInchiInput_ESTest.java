/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 24 19:33:45 GMT 2020
 */

package net.sf.jniinchi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import net.sf.jniinchi.JniInchiInput;
import net.sf.jniinchi.JniInchiStructure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JniInchiInput_ESTest extends JniInchiInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JniInchiStructure jniInchiStructure0 = new JniInchiStructure();
      JniInchiInput jniInchiInput0 = new JniInchiInput(jniInchiStructure0);
      assertEquals("", jniInchiInput0.getOptions());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JniInchiInput jniInchiInput0 = new JniInchiInput();
      JniInchiInput jniInchiInput1 = new JniInchiInput(jniInchiInput0, (String) null);
      jniInchiInput1.options = null;
      String string0 = jniInchiInput1.getOptions();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JniInchiInput jniInchiInput0 = new JniInchiInput();
      jniInchiInput0.options = "(B=Wd3m.sZ@FO";
      String string0 = jniInchiInput0.getOptions();
      assertEquals("(B=Wd3m.sZ@FO", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JniInchiInput jniInchiInput0 = null;
      try {
        jniInchiInput0 = new JniInchiInput("net.sf.jniinchi.INCHI_STEREOTYPE");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/jnati/NativeCodeException
         //
         verifyException("net.sf.jniinchi.JniInchiInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JniInchiInput jniInchiInput0 = new JniInchiInput((String) null);
      assertEquals("", jniInchiInput0.getOptions());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JniInchiInput jniInchiInput0 = new JniInchiInput();
      JniInchiInput jniInchiInput1 = null;
      try {
        jniInchiInput1 = new JniInchiInput(jniInchiInput0, "net.sf.jniinchi.JniInchiInput");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/jnati/NativeCodeException
         //
         verifyException("net.sf.jniinchi.JniInchiInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JniInchiInput jniInchiInput0 = new JniInchiInput();
      String string0 = jniInchiInput0.getOptions();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JniInchiInput jniInchiInput0 = null;
      try {
        jniInchiInput0 = new JniInchiInput(linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/jnati/NativeCodeException
         //
         verifyException("net.sf.jniinchi.JniInchiInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JniInchiInput jniInchiInput0 = null;
      try {
        jniInchiInput0 = new JniInchiInput((JniInchiStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JniInchiInput jniInchiInput0 = null;
      try {
        jniInchiInput0 = new JniInchiInput((JniInchiStructure) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiStructure", e);
      }
  }
}
