/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 26 22:50:45 GMT 2020
 */

package com.sivalabs.jblogger.entities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sivalabs.jblogger.entities.Post;
import com.sivalabs.jblogger.entities.Tag;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tag_ESTest extends Tag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = new Tag();
      boolean boolean0 = tag0.equals(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = new Tag();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      tag0.setPosts(linkedList0);
      List<Post> list0 = tag0.getPosts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = new Tag();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      Post post0 = new Post();
      linkedList0.add(post0);
      tag0.setPosts(linkedList0);
      List<Post> list0 = tag0.getPosts();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel(")");
      String string0 = tag0.getLabel();
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel("");
      String string0 = tag0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = new Integer(0);
      tag0.setId(integer0);
      Integer integer1 = tag0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = new Integer(59);
      tag0.setId(integer0);
      Integer integer1 = tag0.getId();
      assertEquals(59, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = new Integer((-1));
      tag0.setId(integer0);
      Integer integer1 = tag0.getId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel("4q2R,7laRq(y");
      int int0 = tag0.compareTo(tag0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel("SM?k{Ua~^x#Ejy6p>");
      Tag tag1 = new Tag();
      tag1.setLabel(", name=");
      int int0 = tag0.compareTo(tag1);
      assertEquals(71, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel(")");
      Tag tag1 = new Tag();
      tag1.setLabel("F$hY");
      int int0 = tag0.compareTo(tag1);
      assertEquals((-61), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = tag0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = new Tag();
      String string0 = tag0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = new Tag();
      List<Post> list0 = tag0.getPosts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = new Tag();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      tag0.setPosts(linkedList0);
      Tag tag1 = new Tag();
      assertFalse(tag1.equals((Object)tag0));
      
      tag1.setPosts(linkedList0);
      boolean boolean0 = tag0.equals(tag1);
      assertTrue(tag1.equals((Object)tag0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = new Tag();
      Tag tag1 = new Tag();
      assertTrue(tag1.equals((Object)tag0));
      
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      tag1.setPosts(linkedList0);
      tag1.setLabel("");
      tag0.setLabel("");
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = new Tag();
      Tag tag1 = new Tag();
      tag1.setLabel("");
      assertFalse(tag1.equals((Object)tag0));
      
      tag0.setLabel("");
      boolean boolean0 = tag1.equals(tag0);
      assertTrue(tag0.equals((Object)tag1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel("[");
      Tag tag1 = new Tag();
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = new Tag();
      Tag tag1 = new Tag();
      assertTrue(tag1.equals((Object)tag0));
      
      tag1.setLabel("");
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = new Integer((-2576));
      Tag tag1 = new Tag();
      tag0.setId(integer0);
      assertFalse(tag0.equals((Object)tag1));
      
      tag1.setId(integer0);
      boolean boolean0 = tag0.equals(tag1);
      assertTrue(tag0.equals((Object)tag1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = new Tag();
      Tag tag1 = new Tag();
      assertTrue(tag1.equals((Object)tag0));
      
      Integer integer0 = new Integer(1);
      tag0.setId(integer0);
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = new Integer((-2576));
      Tag tag1 = new Tag();
      assertTrue(tag1.equals((Object)tag0));
      
      tag0.setId(integer0);
      boolean boolean0 = tag0.equals(tag1);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = new Tag();
      Object object0 = new Object();
      boolean boolean0 = tag0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = new Tag();
      Tag tag1 = new Tag();
      assertTrue(tag1.equals((Object)tag0));
      
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      tag1.setPosts(linkedList0);
      boolean boolean0 = tag0.equals(tag1);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = new Tag();
      Integer integer0 = new Integer((-2576));
      tag0.setId(integer0);
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = new Tag();
      LinkedList<Post> linkedList0 = new LinkedList<Post>();
      tag0.setPosts(linkedList0);
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = new Tag();
      // Undeclared exception!
      try { 
        tag0.compareTo(tag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sivalabs.jblogger.entities.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = new Tag();
      String string0 = tag0.toString();
      assertEquals("Tag(id=null, label=null, posts=null)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = new Tag();
      tag0.setLabel("");
      tag0.hashCode();
  }
}
