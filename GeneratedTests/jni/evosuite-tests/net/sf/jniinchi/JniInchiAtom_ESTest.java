/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 24 19:48:05 GMT 2020
 */

package net.sf.jniinchi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.jniinchi.INCHI_RADICAL;
import net.sf.jniinchi.JniInchiAtom;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JniInchiAtom_ESTest extends JniInchiAtom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(1105.5114685, (-2892.217818), 1105.5114685, "");
      double double0 = jniInchiAtom0.getZ();
      assertEquals(1105.5114685, double0, 0.01);
      assertEquals(1105.5114685, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals((-2892.217818), jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-2509.6311), (-2509.6311), (-1.0), "tC5h%e6T9XW-yy");
      double double0 = jniInchiAtom0.getZ();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals((-2509.6311), jniInchiAtom0.getY(), 0.01);
      assertEquals((-2509.6311), jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 885.0823, 0.0, "TRIPLET");
      double double0 = jniInchiAtom0.getY();
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(885.0823, double0, 0.01);
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-400.33), (-1.0), (-1160.452697905542), "!7kNqP");
      double double0 = jniInchiAtom0.getY();
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-400.33), jniInchiAtom0.getX(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals((-1160.452697905542), jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(2940.603658966834, 2940.603658966834, 2940.603658966834, "*\"~HLR?[,qK");
      double double0 = jniInchiAtom0.getX();
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(2940.603658966834, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(2940.603658966834, double0, 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(2940.603658966834, jniInchiAtom0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-400.33), (-1.0), (-1160.452697905542), "!7kNqP");
      double double0 = jniInchiAtom0.getX();
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-1.0), jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals((-1160.452697905542), jniInchiAtom0.getZ(), 0.01);
      assertEquals((-400.33), double0, 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, (-378.0630397676975), "");
      jniInchiAtom0.setInchiRadical(984);
      jniInchiAtom0.getRadical();
      assertEquals((-378.0630397676975), jniInchiAtom0.getZ(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getCharge());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("&");
      INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL.DOUBLET;
      jniInchiAtom0.setRadical(iNCHI_RADICAL0);
      jniInchiAtom0.getRadical();
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-2509.6311), (-2509.6311), (-1.0), "tC5h%e6T9XW-yy");
      jniInchiAtom0.setIsotopicMassShift((-946));
      int int0 = jniInchiAtom0.getIsotopicMass();
      assertEquals(9054, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("%p@z/\u0000");
      jniInchiAtom0.setIsotopicMass((-786));
      int int0 = jniInchiAtom0.getIsotopicMass();
      assertEquals((-786), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("\"+-q<d2#MJ4\u0004lWp");
      INCHI_RADICAL iNCHI_RADICAL0 = INCHI_RADICAL.DOUBLET;
      jniInchiAtom0.setRadical(iNCHI_RADICAL0);
      jniInchiAtom0.getInchiRadical();
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("@@5w#i_2tkfMNU");
      jniInchiAtom0.setImplicitTritium(3395);
      int int0 = jniInchiAtom0.getImplicitTritium();
      assertEquals(3395, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(2940.603658966834, 2940.603658966834, 2940.603658966834, "*\"~HLR?[,qK");
      jniInchiAtom0.setImplicitTritium((-1));
      int int0 = jniInchiAtom0.getImplicitTritium();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Ed[B<\"&f3p|KD1h");
      jniInchiAtom0.setImplicitProtium(1905);
      int int0 = jniInchiAtom0.getImplicitProtium();
      assertEquals(1905, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      jniInchiAtom0.setImplicitProtium((-2532));
      int int0 = jniInchiAtom0.getImplicitProtium();
      assertEquals((-2532), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("Ed[B<\"&f3p|KD1h");
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      
      jniInchiAtom0.setImplicitH(0);
      int int0 = jniInchiAtom0.getImplicitH();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("s|,%g,\"C,4wcs9h");
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      
      jniInchiAtom0.setImplicitH(10000);
      int int0 = jniInchiAtom0.getImplicitH();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(1.0, 1.0, 1.0, "");
      jniInchiAtom0.setImplicitDeuterium(4);
      int int0 = jniInchiAtom0.getImplicitDeuterium();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Atom: ");
      jniInchiAtom0.setImplicitDeuterium((-436));
      int int0 = jniInchiAtom0.getImplicitDeuterium();
      assertEquals((-436), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(1105.5114685, (-2892.217818), 1105.5114685, "");
      jniInchiAtom0.getElementType();
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(1105.5114685, jniInchiAtom0.getX(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(1105.5114685, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals((-2892.217818), jniInchiAtom0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, (-378.0630397676975), "");
      jniInchiAtom0.setCharge(984);
      int int0 = jniInchiAtom0.getCharge();
      assertEquals(984, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-3228.15787), (-3228.15787), (-3228.15787), "");
      jniInchiAtom0.setCharge((-2052));
      int int0 = jniInchiAtom0.getCharge();
      assertEquals((-2052), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = null;
      try {
        jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, (-1.0), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chemical element must not be null
         //
         verifyException("net.sf.jniinchi.JniInchiAtom", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-400.33), (-1.0), (-1160.452697905542), "!7kNqP");
      String string0 = jniInchiAtom0.getDebugString();
      assertEquals("InChI Atom: !7kNqP [-400.33,-1.0,-1160.452697905542] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = null;
      try {
        jniInchiAtom0 = new JniInchiAtom((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chemical element must not be null
         //
         verifyException("net.sf.jniinchi.JniInchiAtom", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      int int0 = jniInchiAtom0.getCharge();
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      int int0 = jniInchiAtom0.getImplicitH();
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-1), int0);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getCharge());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("{S SZ+");
      jniInchiAtom0.getRadical();
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("{S SZ+");
      jniInchiAtom0.getElementType();
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getCharge());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      int int0 = jniInchiAtom0.getIsotopicMass();
      assertEquals(0, int0);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-400.33), (-1.0), (-1160.452697905542), "!7kNqP");
      jniInchiAtom0.setInchiRadical(2447);
      // Undeclared exception!
      try { 
        jniInchiAtom0.getInchiRadical();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiAtom", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      double double0 = jniInchiAtom0.getX();
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getCharge());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      int int0 = jniInchiAtom0.getImplicitTritium();
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, int0);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("{S SZ+");
      double double0 = jniInchiAtom0.getZ();
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      jniInchiAtom0.getInchiRadical();
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("{S SZ+");
      int int0 = jniInchiAtom0.getImplicitProtium();
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, int0);
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      double double0 = jniInchiAtom0.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("$VALUES");
      int int0 = jniInchiAtom0.getImplicitDeuterium();
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, int0);
      assertEquals((-1), jniInchiAtom0.getImplicitH());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("iq\"t");
      jniInchiAtom0.debug();
      assertEquals((-1), jniInchiAtom0.getImplicitH());
      assertEquals(0.0, jniInchiAtom0.getZ(), 0.01);
      assertEquals(0, jniInchiAtom0.getImplicitTritium());
      assertEquals(0, jniInchiAtom0.getCharge());
      assertEquals(0, jniInchiAtom0.getIsotopicMass());
      assertEquals(0, jniInchiAtom0.getImplicitDeuterium());
      assertEquals(0, jniInchiAtom0.getImplicitProtium());
      assertEquals(0.0, jniInchiAtom0.getY(), 0.01);
      assertEquals(0.0, jniInchiAtom0.getX(), 0.01);
  }
}
