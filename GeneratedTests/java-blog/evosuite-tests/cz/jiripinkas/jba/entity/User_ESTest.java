/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 26 22:11:45 GMT 2020
 */

package cz.jiripinkas.jba.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import cz.jiripinkas.jba.entity.Blog;
import cz.jiripinkas.jba.entity.Role;
import cz.jiripinkas.jba.entity.User;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User();
      user0.setEnabled(true);
      boolean boolean0 = user0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User();
      user0.setAdmin(true);
      boolean boolean0 = user0.isAdmin();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User();
      LinkedList<Role> linkedList0 = new LinkedList<Role>();
      Role role0 = new Role();
      linkedList0.add(role0);
      user0.setRoles(linkedList0);
      List<Role> list0 = user0.getRoles();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User();
      user0.setPassword("sUGu=v(r+]aew");
      String string0 = user0.getPassword();
      assertEquals("sUGu=v(r+]aew", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User();
      user0.setPassword("");
      String string0 = user0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User();
      user0.setName("E");
      String string0 = user0.getName();
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User();
      user0.setName("");
      String string0 = user0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User();
      Integer integer0 = new Integer(0);
      user0.setId(integer0);
      Integer integer1 = user0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User();
      Integer integer0 = new Integer((-2016));
      user0.setId(integer0);
      Integer integer1 = user0.getId();
      assertEquals((-2016), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      Integer integer0 = Integer.valueOf(511);
      user0.setId(integer0);
      Integer integer1 = user0.getId();
      assertEquals(511, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("cz.jiripinkas.jba.entity.Category");
      String string0 = user0.getEmail();
      assertEquals("cz.jiripinkas.jba.entity.Category", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("");
      String string0 = user0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User();
      LinkedList<Blog> linkedList0 = new LinkedList<Blog>();
      user0.setBlogs(linkedList0);
      List<Blog> list0 = user0.getBlogs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User();
      LinkedList<Blog> linkedList0 = new LinkedList<Blog>();
      user0.setBlogs(linkedList0);
      Blog blog0 = new Blog();
      linkedList0.add(blog0);
      List<Blog> list0 = user0.getBlogs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAdmin();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User();
      LinkedList<Role> linkedList0 = new LinkedList<Role>();
      user0.setRoles(linkedList0);
      List<Role> list0 = user0.getRoles();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = new User();
      List<Blog> list0 = user0.getBlogs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User();
      List<Role> list0 = user0.getRoles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User();
      Integer integer0 = user0.getId();
      assertNull(integer0);
  }
}
