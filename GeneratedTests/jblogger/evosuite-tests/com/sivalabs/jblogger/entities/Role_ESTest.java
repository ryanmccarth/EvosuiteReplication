/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 26 22:43:32 GMT 2020
 */

package com.sivalabs.jblogger.entities;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sivalabs.jblogger.entities.Role;
import com.sivalabs.jblogger.entities.User;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Role_ESTest extends Role_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.equals(role0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      role0.setUsers(linkedList0);
      List<User> list0 = role0.getUsers();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      User user0 = new User();
      linkedList0.add(user0);
      role0.setUsers(linkedList0);
      List<User> list0 = role0.getUsers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Role role0 = new Role();
      role0.setName(", description=");
      String string0 = role0.getName();
      assertEquals(", description=", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Role role0 = new Role();
      role0.setName("");
      String string0 = role0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = new Integer(0);
      role0.setId(integer0);
      Integer integer1 = role0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = new Integer(1389);
      role0.setId(integer0);
      Integer integer1 = role0.getId();
      assertEquals(1389, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = new Integer((-1));
      role0.setId(integer0);
      Integer integer1 = role0.getId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription("");
      String string0 = role0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = role0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Role role0 = new Role();
      List<User> list0 = role0.getUsers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      role0.setUsers(linkedList0);
      assertFalse(role0.equals((Object)role1));
      
      role1.setUsers(linkedList0);
      boolean boolean0 = role0.equals(role1);
      assertTrue(role0.equals((Object)role1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      assertTrue(role1.equals((Object)role0));
      
      LinkedList<User> linkedList0 = new LinkedList<User>();
      role1.setUsers(linkedList0);
      boolean boolean0 = role1.equals(role0);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription(", name=");
      Role role1 = new Role();
      assertFalse(role1.equals((Object)role0));
      
      role1.setDescription(", name=");
      boolean boolean0 = role0.equals(role1);
      assertTrue(role1.equals((Object)role0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      assertTrue(role1.equals((Object)role0));
      
      role1.setDescription("Role(id=null, name=null, description=null, users=null)");
      boolean boolean0 = role0.equals(role1);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      role0.setName("User(id=null, name=null, email=null, password=null, roles=[])");
      role1.setName("User(id=null, name=null, email=null, password=null, roles=[])");
      assertTrue(role1.equals((Object)role0));
      
      role1.setDescription("Role(id=null, name=null, description=null, users=null)");
      boolean boolean0 = role1.equals(role0);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      role0.setName("User(id=null, name=null, email=null, password=null, roles=[])");
      assertFalse(role0.equals((Object)role1));
      
      role1.setName("User(id=null, name=null, email=null, password=null, roles=[])");
      boolean boolean0 = role1.equals(role0);
      assertTrue(role0.equals((Object)role1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      assertTrue(role1.equals((Object)role0));
      
      role1.setName("Role(id=null, name=null, description=null, users=null)");
      boolean boolean0 = role0.equals(role1);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = new Integer(777);
      role0.setId(integer0);
      Role role1 = new Role();
      assertFalse(role1.equals((Object)role0));
      
      role1.setId(integer0);
      boolean boolean0 = role0.equals(role1);
      assertTrue(role1.equals((Object)role0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      assertTrue(role1.equals((Object)role0));
      
      Integer integer0 = new Integer((-1));
      role1.setId(integer0);
      boolean boolean0 = role0.equals(role1);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = new Integer(777);
      role0.setId(integer0);
      Role role1 = new Role();
      boolean boolean0 = role0.equals(role1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      assertTrue(role1.equals((Object)role0));
      
      LinkedList<User> linkedList0 = new LinkedList<User>();
      role1.setUsers(linkedList0);
      boolean boolean0 = role0.equals(role1);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription("p");
      role0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Role role0 = new Role();
      role0.setName("User(id=null, name=null, email=null, password=null, roles=[])");
      role0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Role role0 = new Role();
      Integer integer0 = new Integer(777);
      role0.setId(integer0);
      role0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      role0.setUsers(linkedList0);
      role0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription("Role(id=null, name=null, description=null, users=null)");
      String string0 = role0.getDescription();
      assertEquals("Role(id=null, name=null, description=null, users=null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.toString();
      assertEquals("Role(id=null, name=null, description=null, users=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Role role0 = new Role();
      role0.setName("g3n8On4");
      Role role1 = new Role();
      boolean boolean0 = role0.equals(role1);
      assertFalse(boolean0);
  }
}
