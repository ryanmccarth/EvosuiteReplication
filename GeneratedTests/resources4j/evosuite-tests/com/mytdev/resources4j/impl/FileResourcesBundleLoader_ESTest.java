/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 22 19:45:14 GMT 2020
 */

package com.mytdev.resources4j.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mytdev.resources4j.impl.FileResourcesBundleLoader;
import java.io.File;
import java.nio.charset.Charset;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileResourcesBundleLoader_ESTest extends FileResourcesBundleLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader((File) null, (String) null);
      fileResourcesBundleLoader0.getFileBasename();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader("", "");
      fileResourcesBundleLoader0.getFileBasename();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader("", "");
      fileResourcesBundleLoader0.setDirectory((File) null);
      fileResourcesBundleLoader0.getDirectory();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(?i)(true)|(false)", "jvv");
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "jvv");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("(?i)(true)|(false)\\jvv");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "jvv");
      fileResourcesBundleLoader0.getDirectory();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      MockFile mockFile0 = new MockFile("CYAN", "[a-zA-Z]{2}_[a-zA-Z]{2}");
      mockFile0.createNewFile();
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "CYAN");
      fileResourcesBundleLoader0.getDirectory();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(".properties", "S");
      fileResourcesBundleLoader0.getDirectory();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, "DARK GRAY");
      fileResourcesBundleLoader0.getDirectory();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(":GiSH`HwlW", ":GiSH`HwlW");
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
      
      fileResourcesBundleLoader0.setDateFormatStyle(0);
      int int0 = fileResourcesBundleLoader0.getDateFormatStyle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader("TnVjaCt4D/+lpK\"", "TnVjaCt4D/+lpK\"");
      fileResourcesBundleLoader0.setDateFormatStyle((-3675));
      int int0 = fileResourcesBundleLoader0.getDateFormatStyle();
      assertEquals((-3675), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("AEwa", "AEwa");
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(file0, "AEwa");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      fileResourcesBundleLoader0.setDateFormat(dateFormat0);
      fileResourcesBundleLoader0.getDateFormat();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, ")-M$");
      fileResourcesBundleLoader0.setCharset((Charset) null);
      fileResourcesBundleLoader0.getCharset();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, "BLACK");
      Charset charset0 = Charset.defaultCharset();
      fileResourcesBundleLoader0.setCharset(charset0);
      fileResourcesBundleLoader0.getCharset();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader((File) null, "BLACK");
      // Undeclared exception!
      try { 
        fileResourcesBundleLoader0.loadBundle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mytdev.resources4j.impl.FileResourcesBundleLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".properties");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "");
      fileResourcesBundleLoader0.setCharset((Charset) null);
      // Undeclared exception!
      try { 
        fileResourcesBundleLoader0.loadBundle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".properties");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "");
      fileResourcesBundleLoader0.setDateFormatStyle((byte) (-40));
      // Undeclared exception!
      try { 
        fileResourcesBundleLoader0.loadBundle();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -40
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = null;
      try {
        fileResourcesBundleLoader0 = new FileResourcesBundleLoader((String) null, ".properties");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = null;
      try {
        fileResourcesBundleLoader0 = new FileResourcesBundleLoader((Class<?>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mytdev.resources4j.impl.FileResourcesBundleLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, "LIGHT GRAY");
      fileResourcesBundleLoader0.getFileBasename();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader("", "");
      try { 
        fileResourcesBundleLoader0.loadBundle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.mytdev.resources4j.impl.FileResourcesBundleLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".properties");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      fileResourcesBundleLoader0.setDateFormat(dateFormat0);
      fileResourcesBundleLoader0.loadBundle();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, "DARK GRAY");
      // Undeclared exception!
      try { 
        fileResourcesBundleLoader0.loadBundle();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a directory: java\\lang
         //
         verifyException("com.mytdev.resources4j.impl.FileResourcesBundleLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "");
      fileResourcesBundleLoader0.getDateFormat();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, "DARK GRAY");
      int int0 = fileResourcesBundleLoader0.getDateFormatStyle();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(mockFile0, "");
      fileResourcesBundleLoader0.getDirectory();
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileResourcesBundleLoader fileResourcesBundleLoader0 = new FileResourcesBundleLoader(class0, "DARK GRAY");
      fileResourcesBundleLoader0.setFileBasename("DARK GRAY");
      assertEquals(2, fileResourcesBundleLoader0.getDateFormatStyle());
  }
}
