/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 24 19:45:10 GMT 2020
 */

package net.sf.jniinchi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sf.jniinchi.INCHI_PARITY;
import net.sf.jniinchi.INCHI_RADICAL;
import net.sf.jniinchi.INCHI_STEREOTYPE;
import net.sf.jniinchi.JniInchiAtom;
import net.sf.jniinchi.JniInchiStereo0D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JniInchiStereo0D_ESTest extends JniInchiStereo0D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 1.0, "");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiAtom jniInchiAtom1 = new JniInchiAtom(0, 262.220299624565, 262.220299624565, "H>P9o.");
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom1, iNCHI_PARITY0);
      assertEquals(INCHI_STEREOTYPE.DOUBLEBOND, jniInchiStereo0D0.getStereoType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(4048.090215729158, 4048.090215729158, 4048.090215729158, "_m<?5UPhDCAH");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiAtom jniInchiAtom1 = new JniInchiAtom("_m<?5UPhDCAH");
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom1, jniInchiAtom0, jniInchiAtom1, jniInchiAtom0, iNCHI_PARITY0);
      assertEquals(INCHI_STEREOTYPE.DOUBLEBOND, jniInchiStereo0D0.getStereoType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Stereo0D: ");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiAtom jniInchiAtom1 = new JniInchiAtom("d-o^_#");
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom1, jniInchiAtom1, jniInchiAtom1, jniInchiAtom0, iNCHI_PARITY0);
      assertEquals(INCHI_PARITY.NONE, jniInchiStereo0D0.getDisconnectedParity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Stereo0D: ");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiAtom jniInchiAtom1 = new JniInchiAtom("d-o^_#");
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom1, jniInchiAtom0, jniInchiAtom1, jniInchiAtom1, iNCHI_PARITY0);
      assertEquals(INCHI_PARITY.UNKNOWN, jniInchiStereo0D0.getParity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("fo.oaf)LWw(tF&.i65D");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 4, 0);
      jniInchiStereo0D0.getStereoType();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Atom: ");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.TETRAHEDRAL;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      INCHI_STEREOTYPE iNCHI_STEREOTYPE1 = jniInchiStereo0D0.getStereoType();
      assertSame(iNCHI_STEREOTYPE1, iNCHI_STEREOTYPE0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("UNKNOWN");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, (-2751), (-2751));
      jniInchiStereo0D0.getParity();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("SINGLET");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      INCHI_PARITY iNCHI_PARITY1 = jniInchiStereo0D0.getParity();
      assertEquals(INCHI_PARITY.ODD, iNCHI_PARITY1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D((JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom0 = jniInchiStereo0D0.getNeighbor(0);
      assertNull(jniInchiAtom0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-3497.119941), (-3497.119941), (-1152.8837), "w!8h/sRMEPL)}-x_;Y");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(1);
      assertSame(jniInchiAtom0, jniInchiAtom1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-2844.2507512887996), 0.0, 0.0, "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      jniInchiAtom0.setIsotopicMassShift(0);
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(2);
      assertSame(jniInchiAtom1, jniInchiAtom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Stereo0D: ");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      jniInchiAtom0.setIsotopicMass((-1));
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals((-1), jniInchiAtom1.getIsotopicMass());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("SINGLET");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitTritium(901);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertSame(jniInchiAtom1, jniInchiAtom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-2844.2507512887996), 0.0, 0.0, "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      jniInchiAtom0.setImplicitTritium((-160));
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(2);
      assertEquals("", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("SINGLET");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitProtium(901);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals(0, jniInchiAtom1.getImplicitTritium());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("'FqKO](,,\"!u,=C(.");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.NONE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitProtium((-1));
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(3);
      assertEquals(0, jniInchiAtom1.getIsotopicMass());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Atom: ");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.TETRAHEDRAL;
      jniInchiAtom0.setImplicitH(0);
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals(0, jniInchiAtom1.getCharge());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("#|wbO ");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.NONE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitDeuterium(69);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals(0, jniInchiAtom1.getIsotopicMass());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(4048.090215729158, 4048.090215729158, 4048.090215729158, "_m<?5UPhDCAH");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.TETRAHEDRAL;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitDeuterium((-1));
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals("_m<?5UPhDCAH", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("fo.oaf)LWw(tF&.i65D");
      jniInchiAtom0.setCharge(1708);
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 4, 0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals(0, jniInchiAtom1.getImplicitDeuterium());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, "");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      jniInchiAtom0.setCharge((-1));
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals("", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(3305.85, 0.0, 3305.85, "");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, 0);
      int int0 = jniInchiStereo0D0.getInchiStereoType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(4048.090215729158, 4048.090215729158, 4048.090215729158, "_m<?5UPhDCAH");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.TETRAHEDRAL;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      int int0 = jniInchiStereo0D0.getInchiStereoType();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("InChI Stereo0D: ");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      int int0 = jniInchiStereo0D0.getInchiParity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, (-1399));
      jniInchiStereo0D0.setDisconnectedParity((INCHI_PARITY) null);
      jniInchiStereo0D0.getDisconnectedParity();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      jniInchiStereo0D0.setDisconnectedParity(iNCHI_PARITY0);
      INCHI_PARITY iNCHI_PARITY1 = jniInchiStereo0D0.getDisconnectedParity();
      assertSame(iNCHI_PARITY0, iNCHI_PARITY1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("1TgGo");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertNull(jniInchiAtom1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-1407.6462372179635), (-1407.6462372179635), (-1407.6462372179635), "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.NONE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(INCHI_RADICAL.NONE, jniInchiAtom1.getRadical());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("");
      jniInchiAtom0.setIsotopicMass(2);
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals("", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, "");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      jniInchiAtom0.setIsotopicMass((-2013));
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals("", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, "");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNDEFINED;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitTritium(2);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(0, jniInchiAtom1.getCharge());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("JgIL^*<[s");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      jniInchiAtom0.setImplicitTritium((-2302));
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(0.0, jniInchiAtom1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      jniInchiAtom0.setImplicitProtium(3);
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, (-1399));
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(0.0, jniInchiAtom1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, ">3%a^R\t");
      jniInchiAtom0.setImplicitProtium((-329));
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(0, jniInchiAtom1.getCharge());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("fo.oaf)LWw(tF&.i65D");
      jniInchiAtom0.setImplicitH(0);
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 4, 0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(0.0, jniInchiAtom1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("'[wDJQ@V'A<");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 2, 2);
      jniInchiAtom0.setImplicitH(1355);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertSame(jniInchiAtom1, jniInchiAtom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("#|wbO ");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.NONE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitDeuterium(69);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals("#|wbO ", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(52.54209587, 701.4098694745318, 52.54209587, "*gqLNT!HG`xsQZ!n~");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      jniInchiAtom0.setImplicitDeuterium((-1));
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals(0, jniInchiAtom1.getIsotopicMass());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("fo.oaf)LWw(tF&.i65D");
      jniInchiAtom0.setCharge(1708);
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 4, 0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertEquals("fo.oaf)LWw(tF&.i65D", jniInchiAtom1.getElementType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(52.54209587, 701.4098694745318, 52.54209587, "*gqLNT!HG`xsQZ!n~");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      jniInchiAtom0.setCharge((-1));
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getCentralAtom();
      assertSame(jniInchiAtom0, jniInchiAtom1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(4048.090215729158, 4048.090215729158, 4048.090215729158, "_m<?5UPhDCAH");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.TETRAHEDRAL;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      // Undeclared exception!
      try { 
        jniInchiStereo0D0.getNeighbor((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.sf.jniinchi.JniInchiStereo0D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("x1|vX.hkH|4(~o");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D((JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, (JniInchiAtom) null, jniInchiAtom0, 502, 10000);
      // Undeclared exception!
      try { 
        jniInchiStereo0D0.getInchiParity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiStereo0D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("o");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, (JniInchiAtom) null, (JniInchiAtom) null, jniInchiAtom0, iNCHI_PARITY0);
      // Undeclared exception!
      try { 
        jniInchiStereo0D0.getDebugString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiStereo0D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("UNKNOWN");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D((JniInchiAtom) null, (JniInchiAtom) null, jniInchiAtom0, (JniInchiAtom) null, iNCHI_PARITY0);
      // Undeclared exception!
      try { 
        jniInchiStereo0D0.debug();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiStereo0D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom((-1407.6462372179635), (-1407.6462372179635), (-1407.6462372179635), "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.NONE;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.NONE;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      String string0 = jniInchiStereo0D0.getDebugString();
      assertEquals("InChI Stereo0D:  [,,,] Type::NONE // Parity:NONE", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(";'u>V$GEdP");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.EVEN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      String string0 = jniInchiStereo0D0.getDebugString();
      assertEquals("InChI Stereo0D: - [;'u>V$GEdP,;'u>V$GEdP,;'u>V$GEdP,;'u>V$GEdP] Type::DOUBLEBOND // Parity:EVEN", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 0.0, "");
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = INCHI_STEREOTYPE.DOUBLEBOND;
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, (JniInchiAtom) null, iNCHI_STEREOTYPE0, iNCHI_PARITY0);
      jniInchiAtom0.setImplicitH(1733);
      JniInchiAtom jniInchiAtom1 = jniInchiStereo0D0.getNeighbor(0);
      assertEquals(1733, jniInchiAtom1.getImplicitH());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, 0);
      INCHI_PARITY iNCHI_PARITY0 = jniInchiStereo0D0.getParity();
      assertEquals(INCHI_PARITY.NONE, iNCHI_PARITY0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, 0);
      int int0 = jniInchiStereo0D0.getInchiParity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom(0.0, 0.0, 1.0, "");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, (-635), (-1442));
      // Undeclared exception!
      try { 
        jniInchiStereo0D0.getInchiStereoType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.jniinchi.JniInchiStereo0D", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.UNKNOWN;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewDoublebondStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      jniInchiStereo0D0.debug();
      assertEquals(INCHI_PARITY.NONE, jniInchiStereo0D0.getDisconnectedParity());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, 0);
      INCHI_STEREOTYPE iNCHI_STEREOTYPE0 = jniInchiStereo0D0.getStereoType();
      assertEquals(0, iNCHI_STEREOTYPE0.getIndx());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("a+Y f");
      INCHI_PARITY iNCHI_PARITY0 = INCHI_PARITY.ODD;
      JniInchiStereo0D jniInchiStereo0D0 = JniInchiStereo0D.createNewTetrahedralStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, iNCHI_PARITY0);
      JniInchiAtom[] jniInchiAtomArray0 = jniInchiStereo0D0.getNeighbors();
      assertEquals(4, jniInchiAtomArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JniInchiAtom jniInchiAtom0 = new JniInchiAtom("`ZoN3rRp9=E_d@*");
      JniInchiStereo0D jniInchiStereo0D0 = new JniInchiStereo0D(jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, jniInchiAtom0, 0, 0);
      INCHI_PARITY iNCHI_PARITY0 = jniInchiStereo0D0.getDisconnectedParity();
      assertEquals(0, iNCHI_PARITY0.getIndx());
  }
}
